tableHeadingPrefix: Interface operation 
schemaHeadingPrefix: Data type of
schemaTableCaptionPrefix: Overview on data type
schemaBody: Table %table-ref% provides an overview of the data type %schema% for the mapping to serialization.
tableHeadingStyle: berschrift4
noteStyle: NOTE
tableCaptionStyle: TABLE-title
yamlHeadingStyle: berschrift3
yamlCodeStyle: YamlMono
tableCellBorderWidth: 4
yamlMonoBorderWidth: 4
numberEmptyLines: 1
patternInlineLimit: 80
patternTableCaptionPrefix: Overview on indexed string pattern definitions 
tableColumnWidthCm:
- 3.0
- 6.0
- 1.0
- 3.0
- 1.0
overviewColumnWidthCm:
- 3.0
- 6.0
outputs:
- all: statusCode|Status code of execution of the interface operation|true|StatusCode|1
suppressInputs:
- level
- extent
- limit
- cursor
originSchemaOrder:
- HasDataSpecification
- HasExtensions
- HasKind
- HasSemantics
- Referable
- Identifiable
- Qualifiable
- Administrative Information
- SubmodelElement
- DataElement
suppressSchemaNames:
- modelType
createWordFiles:
- fn: Output_for_IEC63278-5.docx
  useTemplateFn: .\templates\IEC_template.docx
  listStyles: true
  readOpenApiFiles:
  #
  # First pass: Tables for the individual interface operations
  #
  #
  # AAS interface
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    - action: ExportPara
      paraText: AAS administration interface and interface operations
      paraStyle: berschrift2
    - action: ExportPara
      paraText: General
      paraStyle: berschrift3
    - action: ExportPara
      paraText: These interface operations make it possible to access the elements of Asset Administration Shells, which are each an Identifiable entity. The format of the tables in this section are described in Annex A.
      paraStyle: Normal
    - action: ExportPara
      paraText: NOTE   For Identifiable, see IEC 63278-2.
      paraStyle: NOTE
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations of the Asset Administration Shell, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsAAS
      GetAssetAdministrationShell:
        body: The interface operation described in Table %table-ref% allows to request for a specific AAS based on the provided AAS identifier.
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        outputs:
        - all: payload|Requested Asset Administration Shell|true|AssetAdministrationShell|1
      PutAssetAdministrationShell:
        body: The interface operation described in Table %table-ref% allows to replace/ update a complete specific AAS.
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        - all: aas|Provided new Asset Administration Shell that should be used instead|true|AssetAdministrationShell|1 
        outputs:
        - all: payload|Replaced Asset Administration Shell|true|AssetAdministrationShell|1
      GetAllSubmodelReferences:
        body: The interface operation described in Table %table-ref% allows to return all Submodel references contained in a specific AAS. 
        # TODO IDTA OpenAPI files: Submodel with capital first letter
        explanation: Returns all Submodel references
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        outputs:
        - all: payload|Requested Submodel References|true|Reference|0..*
      PostSubmodelReference:
        body: The interface operation described in Table %table-ref% enhances the list of Submodel references of an associated AAS by a new provided Submodel reference.  
        # TODO IDTA OpenAPI files: Submodel with capital first letter
        explanation: Creates a Submodel reference at the Asset Administration Shell
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        - all: submodelRef|Reference to the Submodel|true|Reference|1
        outputs:
        - all: payload|Created Submodel Reference|true|Reference|1
      DeleteSubmodelReference:
        body: The interface operation described in Table %table-ref% removes a specific Submodel reference from the list of Submodel references of an associated AAS.
        # TODO IDTA OpenAPI files: Submodel with capital first letter
        explanation: Deletes the Submodel reference from the Asset Administration Shell. Does not delete the Submodel itself!
        suppressInputs: 
        - level
        - extent
        - limit
        - cursor
        - submodelIdentifier
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        - all: submodelId|The unique id of the Submodel for the reference to be deleted|true|Identifier|1
      GetAssetInformation:
        body: The interface operation described in Table %table-ref% returns related asset information of an associated AAS. 
        # TODO IDTA OpenAPI files: Asset Information with lower-case first letters
        explanation: Returns the asset information
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        outputs:
        - all: payload|Requested Asset Information|true|AssetInformation|1
      PutAssetInformation:
        body: The interface operation described in Table %table-ref% allows to set or update asset-based information of an associated AAS. 
        # TODO IDTA OpenAPI files: Asset Information with lower-case first letters
        explanation: Updates the asset information
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        - all: assetInfo|Asset Information|true|AssetInformation|1
      GetThumbnail:
        body: The interface operation described in Table %table-ref% allows to request for a thumbnail file of an associated AAS.
        # TODO IDTA OpenAPI files: No Text!
        explanation: Returns the thumbnail file of an associated AAS.
        notes:
        - Thumbnail refers to a reduced size image of the asset (see IEC 63278-2). 
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        outputs:
        - all: payload|Requested thumbnail file|true|File Content|1
      PutThumbnail:
        body: The interface operation described in Table %table-ref% allows to set or update a thumbnail file of an associated AAS. 
        # TODO IDTA OpenAPI files: No Text!
        explanation: Replaces the thumbnail file of an associated AAS.
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
        - all: file|Thumbnail file|true|File Content|1
      DeleteThumbnail:
        body: The interface operation described in Table %table-ref% allows to remove a thumbnail file of an associated AAS.
        # TODO IDTA OpenAPI files: No Text!
        explanation: Deletes the thumbnail file of an associated AAS.
        inputs:
        - all: aasId|AssetAdministrationShell identifier|true|AssetAdministrationShellID|1 
  #
  # Submodel interface
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    - action: ExportPara
      paraText: Submodel interface and interface operations
      paraStyle: berschrift2
    - action: ExportPara
      paraText: General
      paraStyle: berschrift3
    - action: ExportPara
      paraText: These interface operations make it possible to access the elements of Submodels, which are each an Identifiable entity. The format of the tables in this section are described in Annex A.
      paraStyle: Normal
    - action: ExportPara
      paraText: Interface operations w.r.t. to overall Submodel structure
      paraStyle: berschrift3
    - action: ExportPara
      paraText: These interface operations make it possible to access Submodels as a whole, not targeting specific SubmodelElements. The format of the tables in this section are described in Annex A.
      paraStyle: Normal
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift4
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations for this subsection, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsSM1
      GetSubmodelById:
        body: The interface operation described in Table %table-ref% allows to request for a specific Submodel based on the provided Submodel identifier. 
      PatchSubmodelById:
        body: The interface operation described in Table %table-ref% allows to update a specific Submodel identified by a Submodel identifier. 
      PutSubmodelById:
        body: The interface operation described in Table %table-ref% allows to replace a specific Submodel identified by a Submodel identifier.
      DeleteSubmodelById:
        body: The interface operation described in Table %table-ref% allows to remove a specific Submodel identified by a Submodel identifier.
      GetAllSubmodelElements:
        body: The interface operation described in Table %table-ref% allows to request for a specific Submodel and its (hierarchical) elements based on a provided Submodel identifier.
      PostSubmodelElement:
        body: The interface operation described in Table %table-ref% allows to enhance a specific Submodel with a new SubmodelElement at the root level of the Submodel.
      # TODO: End file, restart with new text sections
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    - action: ExportPara
      paraText: Interface operations w.r.t. adding file content
      paraStyle: berschrift3
    - action: ExportPara
      paraText: General
      paraStyle: berschrift4
    - action: ExportPara
      paraText: SubmodelElements of subclass File allow adding information, which is represented by separate file content and is of purpose information (see IEC 63278-2). AAS user applications access these contents.
      paraStyle: Normal
    - action: ExportPara
      paraText: EXAMPLE   A handbook of a machine in PDF format is stored and retrieved as file content by AAS user application such as maintenance software.
      paraStyle: EXAMPLE
    - action: ExportPara
      paraText: The interface operations in this subsection concern about the storage and retrieval of such file content with respect to File elements within a Submodel.
      paraStyle: Normal
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift4
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations for this subsection, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsSM2
      GetFileByPath:
        body: The interface operation described in Table %table-ref% allows to request for a specific AAS user related file representation as a specific SubmodelElement, which is identified by a provided Submodel identifier and IdShortPath. 
      PutFileByPath:
        body: The interface operation described in Table %table-ref% allows to set or update a specific AAS user related file at a specific SubmodelElement, which is identified by a provided Submodel identifier and IdShortPath and that expects a file representation.
      DeleteFileByPath:
        body: The interface operation described in Table %table-ref% allows to remove a specific AAS user related file at a specific SubmodelElement, which is identified by a provided Submodel identifier and IdShortPath and that expects a file representation.  
      # TODO: End file, restart with new text sections
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    - action: ExportPara
      paraText: Interface operations w.r.t. nested SubmodelElements
      paraStyle: berschrift3
    - action: ExportPara
      paraText: General
      paraStyle: berschrift4
    - action: ExportPara
      paraText: Within a Submodel, SubmodelElements are hierarchically structure, e.g. by the use of SubmodelElementCollection (see IEC 63278-2). The interface operations in this subsection concern about accessing such SubmodelElements. To specifically address such SubmodelElements, a reference to the Submodel is given together with a list of IdShort identifiers, which one after the other denote the path from the Submodel to the subordinate SubmodelElements. This list of IdShort identifiers is named IdShortPath. 
      paraStyle: Normal
    - action: ExportPara
      paraText: EXAMPLE   See IEC 63278-2 for examples on references. For the reference “(Submodel)https://example.com/aas/1/1/1234859590, (SubmodelElementList)Documents, (SubmodelElementCollection)0, (MultiLanguageProperty)Title”, the IdShortPath is “Documents.0.Title”.
      paraStyle: EXAMPLE
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift4
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations for this subsection, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsSM3
      GetSubmodelElementByPath:
        body: The interface operation described in Table %table-ref% allows to request for a specific element based on a provided Submodel identifier and IdShortPath.
      PostSubmodelElementByPath:
        body: The interface operation described in Table %table-ref% allows to enhance a specific Submodel with a new SubmodelElement at the provided shortId path within the Submodel.
        notes:
        - If the PostSubmodelElementByPath is executed towards a SubmodelElementList, the new SubmodelElement is added to the end of the list. 
      PutSubmodelElementByPath:
        body: The interface operation described in Table %table-ref% allows to replace a SubmodelElement at the provided shortId path within a specific Submodel. 
      PatchSubmodelElementValueByPath:
        body: The interface operation described in Table %table-ref% allows to update a SubmodelElement at the provided shortId path within a specific Submodel. 
      DeleteSubmodelElementByPath:
        body: The operation described in Table %table-ref% allows to delete a SubmodelElement at the provided shortId path within a specific Submodel.
      # TODO IDTA OpenAPI files: Schema of operationIds is inconsistent
      GetSubmodelElementByPath-ValueOnly:
        body: The interface operation described in Table %table-ref% allows to retrieve the specific value of a SubmodelElement at the provided shortId path within a specific Submodel. 
      # TODO IDTA OpenAPI files: Schema of operationIds is inconsistent
      PatchSubmodelElementValueByPathValueOnly:
        body: The interface operation described in Table %table-ref% allows to update the specific value of a SubmodelElement at the provided shortId path within a specific Submodel. 
      # TODO: End file, restart with new text sections
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    - action: ExportPara
      paraText: Interface operations w.r.t. Operation elements
      paraStyle: berschrift3
    - action: ExportPara
      paraText: General
      paraStyle: berschrift4
    - action: ExportPara
      paraText: This subsection concerns about Operation elements, which are a subtype of SubmodelElement and represented within an Submodel. For such Operation elements, the start of synchronous and asynchronous operations is possible. For asynchronous operations, dedicated interface operations for retrieval of status and results are described.
      paraStyle: Normal
    - action: ExportPara
      paraText: NOTE 1  For general description of Operation element, see IEC 63278-2.
      paraStyle: NOTE
    - action: ExportPara
      paraText: NOTE 2  Synchronous operations wait that one operation will complete, before another operation is invoked. The interface operation will return an operation result.
      paraStyle: NOTE
    - action: ExportPara
      paraText: NOTE 3  Asynchronous operations are executed out of time coincidence with its completion; instead of an result, an handle to retrieve status and results are returned. 
      paraStyle: NOTE
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift4
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations for this subsection, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsSM4
      InvokeOperationSync:
        body: The interface operation described in Table %table-ref% allows to execute a syncronous operation represented by an Operation element at the provided shortId path within a specific Submodel. 
      InvokeOperationAsync:
        body: The interface operation described in Table %table-ref% allows to execute an asynchronous operation represented by an Operation element at the provided shortId path within a specific Submodel. 
      GetOperationAsyncStatus:
        body: The interface operation described in Table %table-ref% allows to request the status of an executed asynchronous operation represented by an Operation element of a specific Submodel and a provided operation handler, which was provided when the asynchronous operation was called.
      GetOperationAsyncResult:
        body: The interface operation describe in Table %table-ref% allows to request the result of a completed, executed asynchronous operation represented by an Operation element of a specific Submodel and provided operation handler, which was provided when the asynchronous operation was called. 
  #
  # Second pass: YAML (currently, both as Code and Table)
  #
  #
  #
  # AAS interface
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    # Start of: Extra header for chapter
    - action: ExportPara
      paraText: HTTP API
      paraStyle: berschrift1
    - action: ExportPara
      paraText: General
      paraStyle: berschrift2
    - action: ExportPara
      paraText: This Annex shows a mapping of interfaces to HTTP APIs (application programming interface). The definitions are for the interoperability of such APIs. The interface operations are described in OpenAPI version 3.0.3 using the YAML format. For more information on YAML see [2], [5]. 
      paraStyle: Normal
    - action: ExportPara
      paraText: For further details on the interfaces see [3] and [4].
      paraStyle: Normal
    - action: ExportPara
      paraText: NOTE   In known implementations, parameters for “Limit” and “Cursor” enable pagination of results and parameters for “Level” and “Extend” control extended possibilities towards depth of information. For interoperability, these parameters are noted in the mapping. 
      paraStyle: NOTE
    # End of: Extra header for chapter
    - action: ExportPara
      paraText: AAS administration interface and interface operations
      paraStyle: berschrift2
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% gives an overview of all AAS administration interface and interface operations. 
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportYaml
      yamlAsSource: true
      yamlAsTable: true
    useOperations: *anchorIfcOpsAAS      
  #
  # SM interface 1
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    # Start of: Extra header for chapter
    - action: ExportPara
      paraText: Submodel interface and interface operations w.r.t. to overall Submodel structure
      paraStyle: berschrift2
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% gives an overview of all Submodel interface and interface operations w.r.t. to overall Submodel structure. 
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportYaml
      yamlAsSource: true
      yamlAsTable: true
    useOperations: *anchorIfcOpsSM1
  #
  # SM interface 2
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    # Start of: Extra header for chapter
    - action: ExportPara
      paraText: Submodel interface and interface operations w.r.t. adding file content
      paraStyle: berschrift2
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% gives an overview of all Submodel interface and interface operations w.r.t. adding file content. 
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportYaml
      yamlAsSource: true
      yamlAsTable: true
    useOperations: *anchorIfcOpsSM2
  #
  # SM interface 3
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    # Start of: Extra header for chapter
    - action: ExportPara
      paraText: Submodel interface and interface operations w.r.t. nested SubmodelElements
      paraStyle: berschrift2
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% gives an overview of all Submodel interface and interface operations w.r.t. nested SubmodelElements. 
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportYaml
      yamlAsSource: true
      yamlAsTable: true
    useOperations: *anchorIfcOpsSM3
  #
  # SM interface 4
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    listOperations: false
    actions:
    # Start of: Extra header for chapter
    - action: ExportPara
      paraText: Submodel interface and interface operations w.r.t. Operation elements
      paraStyle: berschrift2
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% gives an overview of all Submodel interface and interface operations w.r.t. Operation elements. 
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportYaml
      yamlAsSource: true
      yamlAsTable: true
    useOperations: *anchorIfcOpsSM4
  #
  # Third pass: Schemas = Data types
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    actions:
    - action: ExportPara
      paraText: Serialization of data types for interface operations
      paraStyle: berschrift2
    - action: ExportPara
      paraText: The following sub sections depict the serialization of specific data types required as input and output data of interface operations. In particular, the serialization into JSON data interchange syntax (ISO/ IEC 21778:2017) is targeted.
      paraStyle: Normal
    - action: ExportPara
      paraText: "The tables in the following sub sections each specify the represenation of a specific JSON object. The tables feature the following columns:"
      paraStyle: Normal
    - action: ExportPara
      paraText: "Member: Attribute within the particular data type. Specified as JSON string followed by the colon structural token. "
      paraStyle: ListDash
    - action: ExportPara
      paraText: "One of data types(s): List of one or more data types possible to be used to express the JSON value of the member attribute. This could be a JSON object or JSON array by itself."
      paraStyle: ListDash
    - action: ExportPara
      paraText: "Req.: Required. Specifies, if the member attribute is always required to be specified for the JSON object or if it can be omited or specified by the literal name token null."
      paraStyle: ListDash
    - action: ExportPara
      paraText: "Card. if present. Minimum and maximum cardinality of the JSON value, if the member attribute is specified. If the maximum cardinality is more than one, the JSON value needs to be specified as a JSON array."
      paraStyle: ListDash
    - action: ExportPara
      paraText: "From: Specifies, in which class of the IEC 63278-2 meta model the member attribute was originally specified in case of deriving from this class."
      paraStyle: ListDash
    - action: ExportPara
      paraText: "Further specification: Specifies further requirements, such as string patterns or minimum or maximum string lengths or string enumeration values. For string pattern specification, the requirements from sub section for indexed string pattern definitions apply. "
      paraStyle: ListDash
    - action: ExportSchema
      includeSchemas: 
      - AssetAdministrationShell
      # is only associated via Reference, therefore 
      - Submodel
      # CD missing
      # abstract types are skipped elsewise
      - SubmodelElement
      # for HTTP operations
      - Result
      suppressSchemas:
      - DataTypeDefXsd
      - Direction
      - EntityType
      - DataElement
      - EmbeddedDataSpecification
      - BasicEventElement
      - Capability
      - ModelType
      - AasSubmodelElements
      - AbstractLangString
      - HasDataSpecification
      suppressMembers:
      - embeddedDataSpecifications
      - modelType
  #
  # Fourth pass: Patterns
  # (just use one file to pass test)
  #
  - fn: .\yamlInput\Plattform_i40-AssetAdministrationShellServiceSpecification-V3.1.1_SSP-001-resolved.yaml
    actions:
    - action: ExportPara
      paraText: Indexed string pattern definitions
      paraStyle: berschrift2
    - action: ExportPara
      paraText: > 
        A JSON value with data type "string" shall be restricted to the characters as defined in XML Schema 1.0, i.e. the string shall consist of these characters only: ^[\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u00010000-\u0010FFFF]*$. This ensures, that encoding and interoperability between different implementations is possible. See https://www.w3.org/TR/xml/#charsets for more information on XML Schema 1.0 string handling. Otherwise, strings in other formats such as JSON could not be converted to XML and vice versa.
      paraStyle: Normal
    - action: ExportPara
      paraText: >
        The JSON value with data type "string" shall contain only valid Unicode characters in the range of encoded in UTF-16 format. The character set of XML/ JSON includes (given as numerical hexidecimal code points and/or ranges in Unicode):
      paraStyle: Normal
    - action: ExportPara
      paraText: "0x09: ASCII horizontal tab,"
      paraStyle: ListDash
    - action: ExportPara
      paraText: "0x0A: ASCII linefeed (newline),"
      paraStyle: ListDash
    - action: ExportPara
      paraText: "0x0D: ASCII carriage return,"
      paraStyle: ListDash
    - action: ExportPara
      paraText: "0x20: ASCII space,"
      paraStyle: ListDash
    - action: ExportPara
      paraText: "x20 - 0xD7FF: all the characters of the Basic Multilingual Plane, and"
      paraStyle: ListDash
    - action: ExportPara
      paraText: "0x00010000-0x0010FFFF: all the characters beyond the Basic Multilingual Plane (e.g., emoticons)."
      paraStyle: ListDash
    - action: ExportPara
      paraText: >
        For specific JSON object member, further specific string patterns are specified by the following table.
      paraStyle: Normal
    - action: ExportPatterns
  #
  # QUERY files
  #
  #
  # Interface Operations
  #
  - fn: .\yamlInput\MIHO-QueryInterfaces-V3.1.1_SSP-999-resolved.yaml
    listOperations: true
    actions:
    - action: ExportPara
      paraText: Query retrieval interface and interface operations
      paraStyle: berschrift2
    - action: ExportPara
      paraText: General
      paraStyle: berschrift3
    - action: ExportPara
      paraText: These interface operations make it possible to access elements of Asset Administration Shells by a query expression.
      paraStyle: Normal
    - action: ExportPara
      paraText: Overview
      paraStyle: berschrift3
    - action: ExportPara
      paraText: Table %table-ref% provides an overview of the interface operations for query retrieval, which are then explained in the following subsections including details such as expected input and output parameters.  
      paraStyle: Normal
    - action: ExportOverview
    - action: ExportTables
    useOperations: &anchorIfcOpsQuery
      GetAssetAdministrationShellsByQuery:
        body: The interface operation described in Table %table-ref% allows to request AssetAdministrationShells elements by a query expression.
        suppressInputs: 
        - level
        - extent
        - cursor
