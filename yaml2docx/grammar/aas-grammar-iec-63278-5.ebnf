grammar = query | AllAccessPermissionRules ;
 
query = [selectStatement], logicalExpression ;
selectStatement = "$select", ws, "id", ws ;

logicalExpression = logicalNestedExpression | logicalOrExpression | logicalAndExpression | logicalNotExpression | matchExpression | BoolLiteral | castToBool | singleComparison ;

logicalNestedExpression = "(",  ws, logicalExpression, ")", ws ;

logicalOrExpression = "$or", ws, "(", ws, logicalExpression, ws, logicalExpression, { ",", ws, logicalExpression }, ")", ws ;

logicalAndExpression = "$and", ws, "(", ws, logicalExpression, ws, logicalExpression, { ",", ws, logicalExpression }, ")", ws ;

logicalNotExpression = "$not", ws, "(", ws, logicalExpression, ")", ws ;

matchExpression = ( "$match", ws, "(", ws, ( singleComparison | matchExpression), { ",", ws, ( singleComparison | matchExpression) }, ")", ws ) ;
 
singleComparison =  
    stringComparison | 
    numericalComparison | 
    hexComparison | 
    boolComparison | 
    dateTimeComparison | 
    timeComparison ;
 
allComparisons = ( "$eq" | "$ne" | "$gt" | "$lt" | "$ge" | "$le" ) ;

stringComparison = 
    ( ( "$starts-with" | "$ends-with" | "$contains" | "$regex"), ws, "(", ws, stringOperand, ws, ",", ws, stringOperand, ws, ")", ws, ) |
    ( stringOperand, ws, allComparisons, ws, stringOperand, ws ) |
    ( stringOperand, ws ,allComparisons, ws, FieldIdentifierString, ws, ) |
    ( FieldIdentifierString, ws, allComparisons, ws, stringOperand, ws ) ;

numericalComparison = 
    ( numericalOperand, ws, allComparisons, ws, numericalOperand, ws ) | 
    ( numericalOperand, ws, allComparisons, ws, FieldIdentifierString, ws ) | 
    ( FieldIdentifierString, ws, allComparisons, ws, numericalOperand, ws ) ;

hexComparison =
    hexOperand, ws, allComparisons, ws, hexOperand, ws ;

boolComparison =
    boolOperand, ws, ( "$eq" | "$ne" ), ws, boolOperand, ws ;

dateTimeComparison =
    dateTimeOperand, ws, allComparisons, ws, dateTimeOperand, ws ;
 
dateTimeToNum =
    ( "$dayOfWeek",  | "$dayOfMonth",  | "$month",  | "$year" ), ws, "(", ws, dateTimeOperand, ws, ")", ws ;

timeComparison =
    timeOperand, ws, allComparisons, ws, timeOperand, ws ;

operand = stringOperand | numericalOperand | hexOperand | boolOperand | dateTimeOperand | timeOperand ;

stringOperand =
    FieldIdentifierString | StringLiteral | castToString | SingleAttribute ;
 
numericalOperand =
    NumericalLiteral | castToNumerical | dateTimeToNum ;
 
hexOperand =
    HexLiteral | castToHex ;

boolOperand =
    BoolLiteral | castToBool ;
 
dateTimeOperand =
    DateTimeLiteral | castToDateTime | GlobalAttribute ;
 
timeOperand =
    TimeLiteral | castToTime ;
 
castToString =
    "str",  ws, "(",  ws, operand, ws, ")", ws ;
 
castToNumerical =
    "num",  ws, "(",  ws, operand, ws, ")", ws ;
 
castToHex =
    "hex",  ws, "(",  ws, operand, ws, ")", ws ;
 
castToBool =
    "bool",  ws, "(",  ws, operand, ws, ")", ws ;
 
castToDateTime =
    "dateTime",  ws, "(",  ws, stringOperand, ws, ")",  ws ;
 
castToTime =
    "time",  ws, "(",  ws, ( stringOperand | dateTimeOperand ), ws, ")", ws ;
 
AllAccessDefAttributes = { "DEFATTRIBUTES", ws, StringLiteral, ws, AttributeGroup, ws, } ;
AllAccessDefAcls = { "DEFACLS",  ws, StringLiteral, ws, ACL, ws } ;
AllAccessDefObjects = { "DEFOBJECTS",  ws, StringLiteral, ws, ObjectGroup, ws } ;
AllAccessDefFormulas = { "DEFFORMULAS",  ws, StringLiteral, ws, Condition, ws } ;
 
AllAccessPermissionDefs =
    AllAccessDefAttributes,
    AllAccessDefAcls,
    AllAccessDefObjects,
    AllAccessDefFormulas ;

AllAccessPermissionRules =
    AllAccessPermissionDefs,
    { AccessPermissionRule, ws } ;
	
AccessFilter = "FILTER:", ws, FragmentObject, ws, ( Condition | UseFormula );

AccessFormula = "FORMULA:", ws, ( Condition | UseFormula ), ws ;
 
AccessAccessRule = "ACCESSRULE:", ws, ( ACL | UseACL ), ws ;
 
AccessObjects = "OBJECTS:", ws, { SingleObject, ws }, { UseObjectGroup, ws } ;
 
AccessPermissionRule =
    AccessAccessRule,
    AccessObjects,
    AccessFormula,
    [ AccessFilter, ws ] ;

AclAttributes = "ATTRIBUTES:", ws, 
    { SingleAttribute, ws },
    { UseAttributeGroup, ws } ;

ACL =
    AclAttributes,
    "RIGHTS:", ws, Right, ws, { Right, ws },
    "ACCESS:", ws, Access, ws ;
 
UseACL =
    "USEACLS",  ws, StringLiteral, ws ;
 
Right =
    "CREATE" | "READ" | "UPDATE" | "DELETE" | "EXECUTE" | "VIEW" | "ALL" | "TREE"  ;
 
Access =
    "ALLOW",  | "DISABLED" ;
 
SingleAttribute =
    ClaimAttribute | GlobalAttribute | ReferenceAttribute ;

ClaimAttribute =
    "CLAIM", ws, "(", ws, ClaimLiteral, ws, ")" ;
 
GlobalAttribute =
    "GLOBAL", ws, "(", ws, ( "LOCALNOW" | "UTCNOW" | "CLIENTNOW" | "ANONYMOUS" ), ws, ")" ;
 
ReferenceAttribute =
    "REFERENCE", ws, "(", ws, ReferenceLiteral, ws, ")" ;

AttributeGroup =
    { SingleAttribute, ws },
    { UseAttributeGroup, ws } ;

UseAttributeGroup =
    "USEATTRIBUTES", ws, StringLiteral, ws ;
 
SingleObject =
    RouteObject | IdentifiableObject | ReferableObject | FragmentObject | DescriptorObject ;
 
RouteObject =
    "ROUTE", ws, RouteLiteral, ws ;
 
IdentifiableObject =
    "IDENTIFIABLE", ws, IdentifiableLiteral, ws ;
 
ReferableObject =
    "REFERABLE", ws, ReferableLiteral, ws ;
 
FragmentObject =
    "FRAGMENT", ws, FragmentLiteral, ws ;
DescriptorObject =
    "DESCRIPTOR", ws, DescriptorLiteral, ws ;
 
ObjectGroup =
    { SingleObject, ws },
    | { UseObjectGroup, ws } ;
 
UseObjectGroup =
    "USEOBJECTS", ws, StringLiteral, ws ;
 
UseFormula =
    "USEFORMULAS", ws, StringLiteral, ws ;
 
Condition = logicalExpression, ws ;

DateTimeLiteral = datetime, ws ;
TimeLiteral = time, ws ;
datetime = date, ws, ( "T" | " " ), ws, time, ws, { timezone, ws } ;
date = year, ws, "-", ws, month, ws, "-", ws, day, ws ;
year = digit, ws, digit, ws, digit, ws, digit, ws ;
month = digit, ws, digit, ws ;
day = digit, ws, digit, ws ;
time = hour, ws, ":", ws, minute, ws, { ":", ws, second, ws }, { ".", ws, fraction, ws } ;
timezone = ( "Z" | ( "+" | "-" ), ws, hour, ws, ":", ws, minute, ws ) ;
hour = digit, ws, digit, ws ;
minute = digit, ws, digit, ws ;
second = digit, ws, digit, ws ;
fraction = digit, { digit }, ws ;

digit = ( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) ;
digitWs = digit, ws ;
UpperAtoF = "A" | "B" | "C" | "D" | "E" | "F" ;

UpperAtoZ = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
          | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
          | "U" | "V" | "W" | "X" | "Y" | "Z" ;
LowerAtoZ = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
          | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
          | "u" | "v" | "w" | "x" | "y" | "z" ;

StringChar = UpperAtoZ | LowerAtoZ | digit | '/' | '*' | '[' | ']' | '(' | ')' | ' ' | '@' | '#' | '\\' | '+' | '-' | '.' | ',' | ':' | '$' | '^' | '_' ;
	
StringLiteral = '"', StringChar, { StringChar }, '"' ;

ClaimLiteral = StringLiteral ;
ReferenceLiteral = StringLiteral ;
RouteLiteral = StringLiteral ;
IdentifiableLiteral = StringLiteral ;
ReferableLiteral = StringLiteral ;
FragmentLiteral = StringLiteral ;
DescriptorLiteral = StringLiteral ;

NumericalLiteral = [ "+" | "-" ], digit, { digit }, [ ( ".", { digit } ) | ( ".", digit, { digit } ) ], [ ( "e" | "E" ), [ "+" | "-" ], digit, { digit } ] ;
HexLiteral = "16#", ( digit | UpperAtoF ), { digit | UpperAtoF } ;
BoolLiteral = "true" | "false" ;
FieldIdentifier = FieldIdentifierString ;
FieldIdentifierString = FieldIdentifierAAS | FieldIdentifierSM | FieldIdentifierSME | FieldIdentifierCD | FieldIdentifierAasDescriptor | FieldIdentifierSmDescriptor ;
FieldIdentifierAAS = "$aas#", ( "idShort" | "id" | "assetInformation.assetKind" | "assetInformation.assetType" | "assetInformation.globalAssetId" | ( "assetInformation.", SpecificAssetIdsClause ) | ( "submodels.", ReferenceClause ) ) ;
FieldIdentifierSM = "$sm#", ( SemanticIdClause | "idShort" | "id" ) ;
FieldIdentifierSME = "$sme", { ".", idShortPath }, "#", ( SemanticIdClause | "idShort" | "value" | "valueType" | "language" ) ;
FieldIdentifierCD = "$cd#", ( "idShort" | "id" ), ws ;
FieldIdentifierAasDescriptor = "$aasdesc#", ( "idShort" | "id" | "assetKind" | "assetType" | "globalAssetId" | SpecificAssetIdsClause | ( "endpoints", ( "[", { digit }, "]" ), ".", EndpointClause ) | ( "submodelDescriptors", ( "[", { digit }, "]" ), ".", SmDescriptorClause )) ;
FieldIdentifierSmDescriptor = "$smdesc#", SmDescriptorClause ;
SmDescriptorClause = ( SemanticIdClause | "idShort" | "id" | ( "endpoints", ( "[", { digit }, "]" ), ".", EndpointClause ) ) ;
EndpointClause = "interface" | "protocolinformation.href"  ;
ReferenceClause = ( "type" | ( "keys", ( "[", { digit }, "]" ) ), ( ".type" | ".value" ) ) ;
SemanticIdClause = ( "semanticId" | ( "semanticId.", ReferenceClause ) ) ;
SpecificAssetIdsClause =  ( "specificAssetIds", ( "[", { digit }, "]" ), ( ".name" | ".value" | ".externalSubjectId" | ( ".externalSubjectId.",  ReferenceClause ) ) ) ;
idShortPath = ( idShort, [ "[", { digit }, "]" ], { ".", idShortPath } ) ;
idShort = ( LowerAtoZ | UpperAtoZ ), { LowerAtoZ | UpperAtoZ | digit | "_" } ;
ws = { " " | "\t" | "\r" | "\n" } ;