Grammar = Query | AllAccessPermissionRules ;
 
Query = [SelectStatement], LogicalExpression ;
SelectStatement = "$select", Ws, "id", Ws ;

LogicalExpression = LogicalNestedExpression | LogicalOrExpression | LogicalAndExpression | LogicalNotExpression | MatchExpression | BoolLiteral | CastToBool | SingleComparison ;

LogicalNestedExpression = "(",  Ws, LogicalExpression, ")", Ws ;

LogicalOrExpression = "$or", Ws, "(", Ws, LogicalExpression, Ws, LogicalExpression, { ",", Ws, LogicalExpression }, ")", Ws ;

LogicalAndExpression = "$and", Ws, "(", Ws, LogicalExpression, Ws, LogicalExpression, { ",", Ws, LogicalExpression }, ")", Ws ;

LogicalNotExpression = "$not", Ws, "(", Ws, LogicalExpression, ")", Ws ;

MatchExpression = ( "$match", Ws, "(", Ws, ( SingleComparison | MatchExpression), { ",", Ws, ( SingleComparison | MatchExpression) }, ")", Ws ) ;
 
SingleComparison =  
    StringComparison | 
    NumericalComparison | 
    HexComparison | 
    BoolComparison | 
    DateTimeComparison | 
    TimeComparison ;
 
AllComparisons = ( "$eq" | "$ne" | "$gt" | "$lt" | "$ge" | "$le" ) ;

StringComparison = 
    ( ( "$starts-with" | "$ends-with" | "$contains" | "$regex"), Ws, "(", Ws, StringOperand, Ws, ",", Ws, StringOperand, Ws, ")", Ws, ) |
    ( StringOperand, Ws, AllComparisons, Ws, StringOperand, Ws ) |
    ( StringOperand, Ws ,AllComparisons, Ws, FieldIdentifierString, Ws, ) |
    ( FieldIdentifierString, Ws, AllComparisons, Ws, StringOperand, Ws ) ;

NumericalComparison = 
    ( NumericalOperand, Ws, AllComparisons, Ws, NumericalOperand, Ws ) | 
    ( NumericalOperand, Ws, AllComparisons, Ws, FieldIdentifierString, Ws ) | 
    ( FieldIdentifierString, Ws, AllComparisons, Ws, NumericalOperand, Ws ) ;

HexComparison =
    HexOperand, Ws, AllComparisons, Ws, HexOperand, Ws ;

BoolComparison =
    BoolOperand, Ws, ( "$eq" | "$ne" ), Ws, BoolOperand, Ws ;

DateTimeComparison =
    DateTimeOperand, Ws, AllComparisons, Ws, DateTimeOperand, Ws ;
 
DateTimeToNum =
    ( "$dayOfWeek",  | "$dayOfMonth",  | "$month",  | "$year" ), Ws, "(", Ws, DateTimeOperand, Ws, ")", Ws ;

TimeComparison =
    TimeOperand, Ws, AllComparisons, Ws, TimeOperand, Ws ;

Operand = StringOperand | NumericalOperand | HexOperand | BoolOperand | DateTimeOperand | TimeOperand ;

StringOperand =
    FieldIdentifierString | StringLiteral | CastToString | SingleAttribute ;
 
NumericalOperand =
    NumericalLiteral | CastToNumerical | DateTimeToNum ;
 
HexOperand =
    HexLiteral | CastToHex ;

BoolOperand =
    BoolLiteral | CastToBool ;
 
DateTimeOperand =
    DateTimeLiteral | CastToDateTime | GlobalAttribute ;
 
TimeOperand =
    TimeLiteral | CastToTime ;
 
CastToString =
    "str",  Ws, "(",  Ws, Operand, Ws, ")", Ws ;
 
CastToNumerical =
    "num",  Ws, "(",  Ws, Operand, Ws, ")", Ws ;
 
CastToHex =
    "hex",  Ws, "(",  Ws, Operand, Ws, ")", Ws ;
 
CastToBool =
    "bool",  Ws, "(",  Ws, Operand, Ws, ")", Ws ;
 
CastToDateTime =
    "dateTime",  Ws, "(",  Ws, StringOperand, Ws, ")",  Ws ;
 
CastToTime =
    "Time",  Ws, "(",  Ws, ( StringOperand | DateTimeOperand ), Ws, ")", Ws ;
 
AllAccessDefAttributes = { "DEFATTRIBUTES", Ws, StringLiteral, Ws, AttributeGroup, Ws, } ;
AllAccessDefAcls = { "DEFACLS",  Ws, StringLiteral, Ws, ACL, Ws } ;
AllAccessDefObjects = { "DEFOBJECTS",  Ws, StringLiteral, Ws, ObjectGroup, Ws } ;
AllAccessDefFormulas = { "DEFFORMULAS",  Ws, StringLiteral, Ws, Condition, Ws } ;
 
AllAccessPermissionDefs =
    AllAccessDefAttributes,
    AllAccessDefAcls,
    AllAccessDefObjects,
    AllAccessDefFormulas ;

AllAccessPermissionRules =
    AllAccessPermissionDefs,
    { AccessPermissionRule, Ws } ;
	
AccessFilter = "FILTER:", Ws, FragmentObject, Ws, ( Condition | UseFormula );

AccessFormula = "FORMULA:", Ws, ( Condition | UseFormula ), Ws ;
 
AccessAccessRule = "ACCESSRULE:", Ws, ( ACL | UseACL ), Ws ;
 
AccessObjects = "OBJECTS:", Ws, { SingleObject, Ws }, { UseObjectGroup, Ws } ;
 
AccessPermissionRule =
    AccessAccessRule,
    AccessObjects,
    AccessFormula,
    [ AccessFilter, Ws ] ;

AclAttributes = "ATTRIBUTES:", Ws, 
    { SingleAttribute, Ws },
    { UseAttributeGroup, Ws } ;

ACL =
    AclAttributes,
    "RIGHTS:", Ws, Right, Ws, { Right, Ws },
    "ACCESS:", Ws, Access, Ws ;
 
UseACL =
    "USEACLS",  Ws, StringLiteral, Ws ;
 
Right =
    "CREATE" | "READ" | "UPDATE" | "DELETE" | "EXECUTE" | "VIEW" | "ALL" | "TREE"  ;
 
Access =
    "ALLOW",  | "DISABLED" ;
 
SingleAttribute =
    ClaimAttribute | GlobalAttribute | ReferenceAttribute ;

ClaimAttribute =
    "CLAIM", Ws, "(", Ws, ClaimLiteral, Ws, ")" ;
 
GlobalAttribute =
    "GLOBAL", Ws, "(", Ws, ( "LOCALNOW" | "UTCNOW" | "CLIENTNOW" | "ANONYMOUS" ), Ws, ")" ;
 
ReferenceAttribute =
    "REFERENCE", Ws, "(", Ws, ReferenceLiteral, Ws, ")" ;

AttributeGroup =
    { SingleAttribute, Ws },
    { UseAttributeGroup, Ws } ;

UseAttributeGroup =
    "USEATTRIBUTES", Ws, StringLiteral, Ws ;
 
SingleObject =
    RouteObject | IdentifiableObject | ReferableObject | FragmentObject | DescriptorObject ;
 
RouteObject =
    "ROUTE", Ws, RouteLiteral, Ws ;
 
IdentifiableObject =
    "IDENTIFIABLE", Ws, IdentifiableLiteral, Ws ;
 
ReferableObject =
    "REFERABLE", Ws, ReferableLiteral, Ws ;
 
FragmentObject =
    "FRAGMENT", Ws, FragmentLiteral, Ws ;
DescriptorObject =
    "DESCRIPTOR", Ws, DescriptorLiteral, Ws ;
 
ObjectGroup =
    { SingleObject, Ws },
    | { UseObjectGroup, Ws } ;
 
UseObjectGroup =
    "USEOBJECTS", Ws, StringLiteral, Ws ;
 
UseFormula =
    "USEFORMULAS", Ws, StringLiteral, Ws ;
 
Condition = LogicalExpression, Ws ;

DateTimeLiteral = DateTime, Ws ;
TimeLiteral = Time, Ws ;
DateTime = Date, Ws, ( "T" | " " ), Ws, Time, Ws, { Timezone, Ws } ;
Date = Year, Ws, "-", Ws, Month, Ws, "-", Ws, Day, Ws ;
Year = Digit, Ws, Digit, Ws, Digit, Ws, Digit, Ws ;
Month = Digit, Ws, Digit, Ws ;
Day = Digit, Ws, Digit, Ws ;
Time = Hour, Ws, ":", Ws, Minute, Ws, { ":", Ws, Second, Ws }, { ".", Ws, Fraction, Ws } ;
Timezone = ( "Z" | ( "+" | "-" ), Ws, Hour, Ws, ":", Ws, Minute, Ws ) ;
Hour = Digit, Ws, Digit, Ws ;
Minute = Digit, Ws, Digit, Ws ;
Second = Digit, Ws, Digit, Ws ;
Fraction = Digit, { Digit }, Ws ;

Digit = ( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) ;
DigitWs = Digit, Ws ;
UpperAtoF = "A" | "B" | "C" | "D" | "E" | "F" ;

UpperAtoZ = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
          | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
          | "U" | "V" | "W" | "X" | "Y" | "Z" ;
LowerAtoZ = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
          | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
          | "u" | "v" | "w" | "x" | "y" | "z" ;

StringChar = UpperAtoZ | LowerAtoZ | Digit | '/' | '*' | '[' | ']' | '(' | ')' | ' ' | '@' | '#' | '\\' | '+' | '-' | '.' | ',' | ':' | '$' | '^' | '_' ;
	
StringLiteral = '"', StringChar, { StringChar }, '"' ;

ClaimLiteral = StringLiteral ;
ReferenceLiteral = StringLiteral ;
RouteLiteral = StringLiteral ;
IdentifiableLiteral = StringLiteral ;
ReferableLiteral = StringLiteral ;
FragmentLiteral = StringLiteral ;
DescriptorLiteral = StringLiteral ;

NumericalLiteral = [ "+" | "-" ], Digit, { Digit }, [ ( ".", { Digit } ) | ( ".", Digit, { Digit } ) ], [ ( "e" | "E" ), [ "+" | "-" ], Digit, { Digit } ] ;
HexLiteral = "16#", ( Digit | UpperAtoF ), { Digit | UpperAtoF } ;
BoolLiteral = "true" | "false" ;
FieldIdentifier = FieldIdentifierString ;
FieldIdentifierString = FieldIdentifierAAS | FieldIdentifierSM | FieldIdentifierSME | FieldIdentifierCD | FieldIdentifierAasDescriptor | FieldIdentifierSmDescriptor ;
FieldIdentifierAAS = "$aas#", ( "IdShort" | "id" | "assetInformation.assetKind" | "assetInformation.assetType" | "assetInformation.globalAssetId" | ( "assetInformation.", SpecificAssetIdsClause ) | ( "submodels.", ReferenceClause ) ) ;
FieldIdentifierSM = "$sm#", ( SemanticIdClause | "IdShort" | "id" ) ;
FieldIdentifierSME = "$sme", { ".", IdShortPath }, "#", ( SemanticIdClause | "IdShort" | "value" | "valueType" | "language" ) ;
FieldIdentifierCD = "$cd#", ( "IdShort" | "id" ), Ws ;
FieldIdentifierAasDescriptor = "$aasdesc#", ( "IdShort" | "id" | "assetKind" | "assetType" | "globalAssetId" | SpecificAssetIdsClause | ( "endpoints", ( "[", { Digit }, "]" ), ".", EndpointClause ) | ( "submodelDescriptors", ( "[", { Digit }, "]" ), ".", SmDescriptorClause )) ;
FieldIdentifierSmDescriptor = "$smdesc#", SmDescriptorClause ;
SmDescriptorClause = ( SemanticIdClause | "IdShort" | "id" | ( "endpoints", ( "[", { Digit }, "]" ), ".", EndpointClause ) ) ;
EndpointClause = "interface" | "protocolinformation.href"  ;
ReferenceClause = ( "type" | ( "keys", ( "[", { Digit }, "]" ) ), ( ".type" | ".value" ) ) ;
SemanticIdClause = ( "semanticId" | ( "semanticId.", ReferenceClause ) ) ;
SpecificAssetIdsClause =  ( "specificAssetIds", ( "[", { Digit }, "]" ), ( ".name" | ".value" | ".externalSubjectId" | ( ".externalSubjectId.",  ReferenceClause ) ) ) ;
IdShortPath = ( IdShort, [ "[", { Digit }, "]" ], { ".", IdShortPath } ) ;
IdShort = ( LowerAtoZ | UpperAtoZ ), { LowerAtoZ | UpperAtoZ | Digit | "_" } ;
Ws = { " " | "\t" | "\r" | "\n" } ;